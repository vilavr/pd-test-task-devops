name: CI

on:
  push:
    branches: '*'
  pull_request:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Record build start time
      id: build_start
      run: echo "build_start_time=$(date +%s)" >> $GITHUB_ENV

    - name: Build Docker image
      run: docker build -t pd-test-task-devops .

    - name: Record build end time
      id: build_end
      run: echo "build_end_time=$(date +%s)" >> $GITHUB_ENV

    - name: Calculate build time
      id: build_time
      run: echo "build_time=$(( ${{ env.build_end_time }} - ${{ env.build_start_time }} ))" >> $GITHUB_ENV

    - name: Record lint start time
      id: lint_start
      run: echo "lint_start_time=$(date +%s)" >> $GITHUB_ENV

    - name: Lint code
      run: docker run --rm pd-test-task-devops npm run lint > lint-results.txt

    - name: Record lint end time
      id: lint_end
      run: echo "lint_end_time=$(date +%s)" >> $GITHUB_ENV

    - name: Calculate lint time
      id: lint_time
      run: echo "lint_time=$(( ${{ env.lint_end_time }} - ${{ env.lint_start_time }} ))" >> $GITHUB_ENV

    - name: Run tests in Docker container
      env:
        API_TOKEN: ${{ secrets.API_TOKEN }}
      run: |
        docker run --rm -e API_TOKEN=$API_TOKEN -v $PWD/test-results:/usr/src/app/test-results pd-test-task-devops npm test -- --json --outputFile=/usr/src/app/test-results/test-results.json
    
    - name: Debug - List files
      run: ls -al test-results

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: test-results/test-results.json

    - name: Create Summary
      run: |
        echo "## CI Summary" > summary.md
        echo "" >> summary.md
        echo "### Lint Results" >> summary.md
        echo '```' >> summary.md
        cat lint-results.txt >> summary.md
        echo '```' >> summary.md
        echo "" >> summary.md
        echo "### Test Results" >> summary.md
        echo '```' >> summary.md
        cat test-results/test-results.json | jq '.' >> summary.md
        echo '```' >> summary.md
        echo "" >> summary.md
        echo "### CI/CD Metrics" >> summary.md
        echo '```' >> summary.md
        echo "- Build Time: ${{ env.build_time }} seconds" >> summary.md
        echo "- Lint Time: ${{ env.lint_time }} seconds" >> summary.md
        echo "- Test Time: $(jq '.testResults | map(.duration) | add / 1000' test-results/test-results.json | awk '{printf "%.2f", $1}') seconds" >> summary.md
        echo '```' >> summary.md

        # Upload summary
        gh pr comment ${{ github.event.pull_request.number }} --body "$(cat summary.md)"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
