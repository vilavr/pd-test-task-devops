name: CI and Code Analysis

on:
  push:
    branches: '*'
  pull_request:
    branches: '*'

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0  # Fetch all history for accurate base comparison

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Install dependencies with npm ci
      run: npm ci
      continue-on-error: true

    - name: Install dependencies with npm install (fallback)
      if: failure()
      run: npm install

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Run npm audit fix and create pull request
      uses: ybiquitous/npm-audit-fix-action@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        github_user: 'github-actions[bot]'
        github_email: 'github-actions[bot]@users.noreply.github.com'
        branch: 'npm-audit-fix-action/fix'
        default_branch: 'main'
        commit_title: 'build(deps): npm audit fix'
        labels: 'dependencies, javascript, security'
        npm_args: '--force'

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      run: docker build -t pd-test-task-devops .

    - name: Lint code
      run: docker run --rm pd-test-task-devops npm run lint > lint-results.txt

    - name: Run tests in Docker container
      env:
        API_TOKEN: ${{ secrets.API_TOKEN }}
      run: |
        docker run --rm -e API_TOKEN=$API_TOKEN -v $PWD/test-results:/usr/src/app/test-results pd-test-task-devops bash -c "npm test -- --json --outputFile=/usr/src/app/test-results/test-results.json && chmod -R 755 /usr/src/app/test-results && node jest-to-ctrf.js"
      
    - name: Debug - List files
      run: ls -al test-results

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: test-results/test-results.json

    - name: Upload CTRF Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ctrf-results
        path: test-results/ctrf-results.json

    - name: Publish CTRF Test Summary Results
      run: npx github-actions-ctrf summary test-results/ctrf-results.json
      if: always()

    - name: Publish CTRF Detailed Test Summary Results
      run: npx github-actions-ctrf tests test-results/ctrf-results.json
      if: always()

    - name: Publish CTRF Failed Test Summary Results
      run: npx github-actions-ctrf failed test-results/ctrf-results.json
      if: always()

    - name: Fetch base branch for comparison
      run: git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1000

    - name: Configure Git user
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: Stash changes
      run: |
        git add .
        git commit -m "Stashing changes"
        git stash

    - name: Checkout base branch
      run: git checkout ${{ github.event.pull_request.base.ref }}

    - name: Install dependencies on base branch
      run: npm ci

    - name: Run tests and generate coverage report on base branch
      env:
        API_TOKEN: ${{ secrets.API_TOKEN }}
      run: |
        npm test -- --json --outputFile=.base_test_results/test-results.json --coverage --coverageDirectory=.base_test_results && chmod -R 755 .base_test_results

    - name: Checkout pull request branch
      run: git checkout ${{ github.event.pull_request.head.ref }}

    - name: Apply stashed changes
      run: |
        git stash pop || echo "No changes to apply from stash"

    - name: Jest Coverage Report Action
      id: coverage
      uses: ArtiomTr/jest-coverage-report-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        coverage-file: test-results/test-results.json
        base-coverage-file: .base_test_results/test-results.json
        output: comment, report-markdown
        annotations: coverage

  code_analysis:
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Dependency-Check
      run: |
        wget https://github.com/jeremylong/DependencyCheck/releases/download/v6.3.2/dependency-check-6.3.2-release.zip
        unzip dependency-check-6.3.2-release.zip
    
    - name: Install dependencies
      run: npm ci
        
    - name: Run Dependency-Check
      run: |
        ./dependency-check/bin/dependency-check.sh --project MyProject --out ./dependency-check-report --scan . --format ALL --disableAssembly
        
    - name: Upload Dependency-Check Report
      uses: actions/upload-artifact@v2
      with:
        name: dependency-check-report
        path: dependency-check-report

  security_analysis:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/security"
