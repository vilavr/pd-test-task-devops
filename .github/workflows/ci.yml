name: CI

on:
  push:
    branches: '*'
  pull_request:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Record build start time
      id: build_start
      run: echo "build_start_time=$(date +%s)" >> $GITHUB_ENV

    - name: Build Docker image
      run: docker build -t pd-test-task-devops .

    - name: Record build end time
      id: build_end
      run: echo "build_end_time=$(date +%s)" >> $GITHUB_ENV

    - name: Calculate build time
      id: build_time
      run: echo "build_time=$(( ${{ env.build_end_time }} - ${{ env.build_start_time }} ))" >> $GITHUB_ENV

    - name: Record lint start time
      id: lint_start
      run: echo "lint_start_time=$(date +%s)" >> $GITHUB_ENV

    - name: Lint code
      run: docker run --rm pd-test-task-devops npm run lint > lint-results.txt

    - name: Record lint end time
      id: lint_end
      run: echo "lint_end_time=$(date +%s)" >> $GITHUB_ENV

    - name: Calculate lint time
      id: lint_time
      run: echo "lint_time=$(( ${{ env.lint_end_time }} - ${{ env.lint_start_time }} ))" >> $GITHUB_ENV

    - name: Run tests in Docker container
      env:
        API_TOKEN: ${{ secrets.API_TOKEN }}
      run: |
        docker run --rm -e API_TOKEN=$API_TOKEN pd-test-task-devops npm test -- --json --outputFile=test-results.json

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: test-results.json

    - name: Create Summary
      uses: actions/github-script@v4
      with:
        script: |
          const fs = require('fs');
          const lintResults = fs.readFileSync('lint-results.txt', 'utf8');
          const testResults = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));

          const totalTests = testResults.numTotalTests;
          const passedTests = testResults.numPassedTests;
          const failedTests = testResults.numFailedTests;
          const testExecutionTime = testResults.testResults.reduce((acc, result) => acc + result.duration, 0) / 1000;

          const summary = `
            ## CI Summary

            ### Lint Results
            \`\`\`
            ${lintResults}
            \`\`\`

            ### Test Results
            \`\`\`
            - Total Tests: ${totalTests}
            - Passed Tests: ${passedTests}
            - Failed Tests: ${failedTests}
            - Test Execution Time: ${testExecutionTime.toFixed(2)} seconds
            \`\`\`

            ### CI/CD Metrics
            \`\`\`
            - Build Time: ${process.env.build_time} seconds
            - Lint Time: ${process.env.lint_time} seconds
            - Test Time: ${testExecutionTime.toFixed(2)} seconds
            \`\`\`
          `;

          const issueNumber = github.context.payload.pull_request ? github.context.payload.pull_request.number : github.context.runId;

          github.rest.issues.createComment({
            owner: github.context.repo.owner,
            repo: github.context.repo.repo,
            issue_number: issueNumber,
            body: summary
          });